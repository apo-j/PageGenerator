(function(pages){ko.bindingProvider.instance = new StringInterpolatingBindingProvider();var viewModel = function(){	var self = this;	self.page = {        id : ko.observable(''),        on : ko.observable(false),        leftSideBar : new components.sideBar(utilities.getID(), false, []),        rightSideBar :  new components.sideBar(utilities.getID(), false, []),        title : ko.observable('sfasd'),        sections :ko.observableArray([])    };    self.availableLanguages = ko.observableArray([ 'zh','en','fr']);    self.options = {};    self.options.sideBar = [        {name:'Properties',  value:enums.optionsEnums.Properties},        {name : 'Add child', value:enums.optionsEnums.Add},        {name: 'Delete', value:enums.optionsEnums.Delete}    ];    self.pageComponentData = ko.observable({});    self.currentPageComponent = ko.observable(enums.componentIdEnum.None);    self.templateParams = ko.observable({});    ko.computed(function() {        var params = { template: self.currentPageComponent(), data: self.pageComponentData() };        self.templateParams(params);    }).extend({ throttle: 1 });    self.options.onClick = function(data, event, callback){        var res = {};        if(!!callback && typeof callback === 'function'){            res = callback(data,event);        }        self.currentPageComponent(res.currentPageComponent);        switch(data.value){            case enums.optionsEnums.Properties:            case enums.optionsEnums.Add:                self.pageComponentData(res.outObject || {});                break;            case enums.optionsEnums.Delete:                self.pageComponentData({});                break;            default :                console.log('option : ' + data.name + 'not defined');                break;        };    };}ko.applyBindings(new viewModel());}());